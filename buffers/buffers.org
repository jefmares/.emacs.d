#+title: Text navigation and buffers behavior
* Text navigation
** Inserting new line
    Add a new line below the current line
   #+begin_src emacs-lisp
     (defun insert-new-line-below ()
       (interactive)
       (let ((oldpos (point)))
         (end-of-line)
         (newline-and-indent)))

  (global-set-key (kbd "C-o") 'insert-new-line-below)
   #+end_src
** Scrolling
   #+begin_src emacs-lisp
     (setq kill-buffer-query-functions
           (remq 'process-kill-buffer-query-function
                 kill-buffer-query-functions))
     ;; mouse scrolls very slowly
     (setq confirm-kill-processes nil)
     (setq scroll-step            1
           scroll-conservatively  10000
           mouse-wheel-scroll-amount '(1 ((shift) . 1))
           mouse-wheel-progressive-speed nil
           mouse-wheel-follow-mouse 't)
   #+end_src
* Evil Mode
  Yes, i use vim too.
#+begin_src emacs-lisp
 (add-to-list 'load-path "~/.emacs.d/evil")
 (require 'evil)
 (evil-mode 1)
#+end_src
* Smartparents
  Creates pairs of parenthesis in a smart way
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (sp-use-paredit-bindings)
    (add-hook 'prog-mode-hook #'smartparens-mode)
    (sp-pair "{" nil :post-handlers '(("||\n[i]" "RET"))))
#+end_src
#+begin_src emacs-lisp
#+end_src
* Ace-window
  #+begin_src emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (progn
       (global-set-key [remap other-window] 'ace-window)
       (custom-set-faces
        '(aw-leading-char-face
          ((t (:inherit ace-jump-face-foreground :height 2.0)))))))
  #+end_src

* Dired
** Sidebar
#+begin_src emacs-lisp
; (use-package dired-sidebar
;   :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
;   :ensure t
;   :commands (dired-sidebar-toggle-sidebar)
;   :init)
#+end_src
** Icons 
#+begin_src emacs-lisp
;  (use-package all-the-icons-dired :ensure t)
;  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src
** Default applications to extensions 
#+begin_src emacs-lisp
  (use-package dired-open
    :ensure t
    :config
    (setq dired-open-extensions
          '(("doc" . "openoffice4")
            ("docx" . "openoffice4")
            ("xopp" . "xournalpp")
            ("gif" . "mirage")
            ("jpeg" ."mirage")
            ("jpg" . "mirage")
            ("png" . "mirage")
            ("mkv" . "mpv")
            ("avi" . "mpv")
            ("mov" . "mpv")
            ("mp3" . "mpv")
            ("mp4" . "mpv")
            ("pdf" . "xreader")
            ("webm" . "mpv"))))
#+end_src
** Hide dotfiles and extra information (aka ownership and such)
#+begin_src emacs-lisp
  (use-package dired-hide-dotfiles
    :ensure t
    :config
    (dired-hide-dotfiles-mode)
    (define-key dired-mode-map "." 'dired-hide-dotfiles-mode))

  (setq-default dired-listing-switches "-lhvA")
  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))
  ;; Taken from here: https://emacs.stackexchange.com/questions/13080/reloading-directory-local-variables/13096#13096
  (defun my-reload-dir-locals-for-current-buffer ()
    "reload dir locals for the current buffer"
    (interactivye)
    (let ((enable-local-variables :all))
      (hack-dir-local-variables-non-file-buffer)))
  (defun my-reload-dir-locals-for-all-buffer-in-this-directory ()
    "For every buffer with the same `default-directory` as the
  current buffer's, reload dir-locals."
    (interactive)
    (let ((dir default-directory))
      (dolist (buffer (buffer-list))
        (with-current-buffer buffer
          (when (equal default-directory dir))
          (my-reload-dir-locals-for-current-buffer)))))
#+end_src

