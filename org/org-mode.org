#+title: Org-mode configurations
* General config
** Variables
#+begin_src emacs-lisp

  (setq org-startup-folded t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)

  (setq visual-fill-column-width 100 visual-fill-column-center-text t)

  (setq-default fill-column 79)
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)

  (setq-default org-image-actual-width 620)
  (setq org-latex-prefer-user-labels t)
  (setq org-export-with-sub-superscripts nil)

#+end_src 
** Org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
  (setq org-ellipsis "ᐯ")

  (font-lock-add-keywords
   'org-mode
   '(("^[[:space:]]*\\(-\\) "
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src
** Center org buffers
#+begin_src emacs-lisp
  (defun efs/org-mode-visual-fill ()
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :ensure t
    :hook (org-mode . efs/org-mode-visual-fill))
#+end_src
* Tasks management
#+begin_src emacs-lisp

  (add-hook 'org-mode-hook 'auto-fill-mode)
  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)" "DROP(x!)"))
        org-log-into-drawer t)

  (defun org-file-path (filename)
    ;; return the absolute address of an org file, give its relative name
    (concat (file-name-as-directory org-directory) filename))

  (setq org-index-file (org-file-path "TODOs.org"))
  (setq org-archive-location
        (concat (org-file-path "DONE.org") "::* From %s"))

  ;; copy the content out of the archive.org file and yank in the inbox.org
  (setq org-agenda-files (list org-index-file))
  ;; mark  a todo as done and move it to an appropriate place in the archive.
  (defun hrs/mark-done-and-archive ()
    ;; mark the state of an org-mode item as DONE and archive it.
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))
  (setq org-log-done 'time)

#+end_src
* Displaying inline images
   The joy of programming = https://joy.pm/post/2017-09-17-a_graphviz_primer/nn
#+begin_src emacs-lisp

  (setq org-image-actual-width 200)
    (defun my/fix-inline-images ()
      (when org-inline-image-overlays
        (org-redisplay-inline-images)))
    (add-hook 'org-babel-after-execute-hook 'my/fix-inline-images)
    (add-hook 'org-mode-hook 'org-toggle-inline-images)

#+end_src
* Code
#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
  (require 'color)
  (set-face-attribute 'org-block nil :background
                      (color-darken-name
                       (face-attribute 'default :background) 3))

#+end_src
* org-publishing 
** Compiling pdf
   #+begin_src emacs-lisp
     (setq org-latex-pdf-process (list
        "latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f"))
   #+end_src
** Open pdfs in xreader   
   Makes UTF-8 symbols appears in buffer I use it for editing Latex
   #+begin_src emacs-lisp
     (setq org-export-with-sub-superscripts nil)
     (add-hook 'org-mode-hook
               (lambda () (org-toggle-pretty-entities)))
     ;; Opening pdfs
     (add-to-list 'org-file-apps '("\\.pdf" . "xreader %s"))
#+end_src
** Org publishing folder
   #+begin_src emacs-lisp
;    (defvar org-export-output-directory-prefix "~/Documents" "prefix of directory used for org-mode export")

;    (defadvice org-export-output-file-name (before org-add-export-dir activate)
;      "Modifies org-export to place exported files in a different directory"
;      (when (not pub-dir)
;        (setq pub-dir (concat org-export-output-directory-prefix (substring extension 1)))
;        (when (not (file-directory-p pub-dir))
;          (make-directory pub-dir))))
   #+end_src
* Key-bindings in org-mode
#+begin_src emacs-lisp

  (global-set-key (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
  (global-set-key (kbd "C-c i") 'org-toggle-inline-images)
  (global-set-key (kbd "C-x p") 'org-latex-export-to-pdf)
  (define-key global-map "\C-cc" 'org-capture)

#+end_src
* Org LaTeX
** Preview Latex fragments
**** org-fragtog loading latex fragments
     [[./images/preview-example.gif]]
    - TODO [ ] Still want a way to store all images generated in one place.
   #+begin_src emacs-lisp
                                             ; load the latex fragments automatically
     (use-package org-fragtog :ensure t)
     (add-hook 'org-mode-hook 'org-fragtog-mode)

                                             ; using dvipng makes it faster, but with less quality
     (setq org-latex-create-formula-image-program  'dvisvgm)


                                             ; adjusting the size
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

                                             ;     (setq org-latex-caption-above nil)
   #+end_src
** cdlatex
    #+begin_src emacs-lisp
      (use-package cdlatex
        :ensure t)
      (add-hook 'cdlatex-mode-hook
                (lambda () (when (eq major-mode 'org-mode)
                             (make-local-variable 'org-pretty-entities-include-sub-superscripts)
                             (setq org-pretty-entities-include-sub-superscripts nil))))
      (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)

    #+end_src
** bibtex
    #+begin_src emacs-lisp
      (setq org-latex-to-pdf-process (list "latexmk -pvc -pdf %f"))
    #+end_src
** minted
    #+begin_src emacs-lisp

      (setq org-latex-listings 'minted)
      (setq org-latex-minted-options
            '(("frame" "") ("linenos=true")))

    #+end_src

** Tikz
#+begin_src emacs-lisp
;      (add-hook 'org-mode-hook
;        (lambda () (texfrag-mode))

      (add-to-list 'org-latex-packages-alist
                   '("" "tikz" t))
      (eval-after-load "preview"
        '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))

 #+end_src
* Org-ref
   Org references in bibtex
   Found in: https://github.com/berquist/dotfiles/blob/main/dotfiles/emacs.d/config.org
   #+begin_src emacs-lisp
     ;    (use-package org-ref
     ;      :disabled t
     ;      :config
     ;      (setq reftex-default-bibliography "~/bibliography2/references.bib")
     ;      (setq org-ref-default-bibliography "~/bibliography2/references.bib")
     ;      (setq org-ref-bibliography-notes "~/bibliography2/notes.org")
     ;      (setq org-ref-pdf-directory "~/bibliography2/pdfs")
     ;      (setq bibtex-completion-bibliography "~/bibliography2/references.bib")
     ;      (setq bibtex-completion-library-path "~/bibliography2/pdfs")
     ;      (setq bibtex-completion-notes-path "~/bibliography2/notes"))
   #+end_src
